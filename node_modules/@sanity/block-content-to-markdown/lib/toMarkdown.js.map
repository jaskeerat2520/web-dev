{"version":3,"sources":["../src/toMarkdown.js"],"names":["require","getImageUrl","getSerializers","blocksToNodes","mergeSerializers","mdSerializers","disallowedEmptyMarks","sanitizeEmptyMarkedSpans","blocks","sanitizedBlock","block","_type","Array","isArray","children","newBlock","Object","assign","text","length","marks","allowedEmptyMarks","filter","includes","mark","map","renderNode","render","props","childNodes","node","defaultSerializers","serializeSpan","markdownSerializers","toMarkdown","options","serializers","listNestMode","trim","module","exports"],"mappings":";;eAKIA,QAAQ,gDAAR,C;IAJFC,W,YAAAA,W;IACAC,c,YAAAA,c;IACAC,a,YAAAA,a;IACAC,gB,YAAAA,gB;;AAGF,IAAMC,gBAAgBL,QAAQ,eAAR,CAAtB;;AAEA,IAAMM,uBAAuB,CAAC,gBAAD,EAAmB,IAAnB,EAAyB,QAAzB,EAAmC,WAAnC,CAA7B;;AAEA,IAAMC,2BAA2B,SAA3BA,wBAA2B,GAAiB;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;;AAChD,MAAMC,iBAAiB,SAAjBA,cAAiB,QAAS;AAC9B,QAAIC,MAAMC,KAAN,KAAgB,OAAhB,IAA2BC,MAAMC,OAAN,CAAcH,MAAMI,QAApB,CAA/B,EAA8D;AAC5D,UAAMC,WAAWC,OAAOC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,CAAjB;;AAEAK,eAASD,QAAT,GAAoBP,yBAAyBG,MAAMI,QAA/B,CAApB;;AAEA,aAAOC,QAAP;AACD;;AAED,QAAIL,MAAMC,KAAN,KAAgB,MAAhB,IAA0BD,MAAMQ,IAAN,CAAWC,MAAX,IAAqB,CAA/C,IAAoDP,MAAMC,OAAN,CAAcH,MAAMU,KAApB,CAAxD,EAAoF;AAClF,UAAMC,oBAAoBX,MAAMU,KAAN,CAAYE,MAAZ,CAAmB,gBAAQ;AACnD,eAAO,CAAChB,qBAAqBiB,QAArB,CAA8BC,IAA9B,CAAR;AACD,OAFyB,CAA1B;;AAIA,UAAIH,kBAAkBF,MAAlB,IAA4B,CAAhC,EAAmC;AACjC,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAOH,OAAOC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAC9BU,iBAAOC;AADuB,SAAzB,CAAP;AAGD;AACF;;AAED,WAAOX,KAAP;AACD,GAxBD;;AA0BA,SAAOE,MAAMC,OAAN,CAAcL,MAAd,IACHA,OAAOiB,GAAP,CAAWhB,cAAX,EAA2Ba,MAA3B,CAAkC;AAAA,WAAS,CAAC,CAACZ,KAAX;AAAA,GAAlC,CADG,GAEHD,eAAeD,MAAf,CAFJ;AAGD,CA9BD;;AAgCA,IAAMkB,aAAa,SAAbA,UAAa,CAACC,MAAD,EAASC,KAAT,EAAgBC,UAAhB,EAA+B;AAChD,MAAMf,WAAWe,cAAeD,MAAME,IAAN,IAAcF,MAAME,IAAN,CAAWhB,QAAzD;AACA,SAAOa,OAAOX,OAAOC,MAAP,CAAc,EAAd,EAAkBW,KAAlB,EAAyB,EAACd,kBAAD,EAAzB,CAAP,CAAP;AACD,CAHD;;sBAK4CZ,eAAewB,UAAf,C;IAArCK,kB,mBAAAA,kB;IAAoBC,a,mBAAAA,a;;AAC3B,IAAMC,sBAAsB7B,iBAAiB2B,kBAAjB,EAAqC1B,aAArC,CAA5B;;AAEA,IAAM6B,aAAa,SAAbA,UAAa,CAACxB,KAAD,EAAyB;AAAA,MAAjByB,OAAiB,uEAAP,EAAO;;AAC1C,MAAM3B,SAASD,yBAAyBG,SAAS,EAAlC,CAAf;AACA,MAAM0B,cAAchC,iBAAiB6B,mBAAjB,EAAsCE,QAAQC,WAAR,IAAuB,EAA7D,CAApB;AACA,MAAMR,QAAQZ,OAAOC,MAAP,CAAc,EAAd,EAAkBkB,OAAlB,EAA2B,EAAC3B,cAAD,EAAS4B,wBAAT,EAAsBC,cAAc,YAApC,EAA3B,CAAd;AACA,SAAOlC,cAAcuB,UAAd,EAA0BE,KAA1B,EAAiCG,kBAAjC,EAAqDC,aAArD,EAAoEM,IAApE,EAAP;AACD,CALD;;AAOA;AACAJ,WAAWH,kBAAX,GAAgCA,kBAAhC;;AAEA;AACAG,WAAWjC,WAAX,GAAyBA,WAAzB;;AAEAsC,OAAOC,OAAP,GAAiBN,UAAjB","file":"toMarkdown.js","sourcesContent":["const {\n  getImageUrl,\n  getSerializers,\n  blocksToNodes,\n  mergeSerializers\n} = require('@sanity/block-content-to-hyperscript/internals')\n\nconst mdSerializers = require('./serializers')\n\nconst disallowedEmptyMarks = ['strike-through', 'em', 'strong', 'underline']\n\nconst sanitizeEmptyMarkedSpans = (blocks = []) => {\n  const sanitizedBlock = block => {\n    if (block._type === 'block' && Array.isArray(block.children)) {\n      const newBlock = Object.assign({}, block)\n\n      newBlock.children = sanitizeEmptyMarkedSpans(block.children)\n\n      return newBlock\n    }\n\n    if (block._type === 'span' && block.text.length == 0 && Array.isArray(block.marks)) {\n      const allowedEmptyMarks = block.marks.filter(mark => {\n        return !disallowedEmptyMarks.includes(mark)\n      })\n\n      if (allowedEmptyMarks.length == 0) {\n        return null\n      } else {\n        return Object.assign({}, block, {\n          marks: allowedEmptyMarks\n        })\n      }\n    }\n\n    return block\n  }\n\n  return Array.isArray(blocks)\n    ? blocks.map(sanitizedBlock).filter(block => !!block)\n    : sanitizedBlock(blocks)\n}\n\nconst renderNode = (render, props, childNodes) => {\n  const children = childNodes || (props.node && props.node.children)\n  return render(Object.assign({}, props, {children}))\n}\n\nconst {defaultSerializers, serializeSpan} = getSerializers(renderNode)\nconst markdownSerializers = mergeSerializers(defaultSerializers, mdSerializers)\n\nconst toMarkdown = (block, options = {}) => {\n  const blocks = sanitizeEmptyMarkedSpans(block || [])\n  const serializers = mergeSerializers(markdownSerializers, options.serializers || {})\n  const props = Object.assign({}, options, {blocks, serializers, listNestMode: 'last-child'})\n  return blocksToNodes(renderNode, props, defaultSerializers, serializeSpan).trim()\n}\n\n// Expose default serializers to the user\ntoMarkdown.defaultSerializers = defaultSerializers\n\n// Expose logic for building image URLs from an image reference/node\ntoMarkdown.getImageUrl = getImageUrl\n\nmodule.exports = toMarkdown\n"]}